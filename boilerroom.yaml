substitutions:
  name: boilerroom
  friendly_name: "Boilerroom"

esphome:
  name: $name

esp8266:
  board: nodemcuv2   

# Enable logging
logger:
   level: NONE

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  reboot_timeout: 0s
  power_save_mode: high
  manual_ip:
    static_ip: !secret ip_boilerroom
    gateway: !secret ip_gateway
    subnet: !secret ip_subnet

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "ESP_${name}"
    password: !secret wifi_password

captive_portal:

web_server:
  port: 80

dallas:
  # - pin: GPIO13
  - pin: D4
    update_interval: 5s

sensor:
  # Uptime and WiFi Signal are just sensors for diagnostics
  # They are not being used in the operation of the boiler
  - platform: uptime
    name: "${friendly_name} Uptime"
    id: ${name}_uptime
    update_interval: 60s
    disabled_by_default: False
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    id: boilerroom_wifi_signal
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    entity_category: "diagnostic"
    unit_of_measurement: "%"
    update_interval: 60s
    disabled_by_default: False
  - platform: adc
    id: heating_indicator
    pin: A0 #GPIO32
    update_interval: 2s
    # internal: True
  - platform: dallas
    id: boiler_output_temperature
    name: "Boiler Output Temperature"
    device_class: "temperature"
    unit_of_measurement: "°C"
    address: 0xe20000001f331a28
    resolution: 10
    filters:
      - filter_out: nan
    on_value:
      lambda: |-
        if(x >= id(boiler_input_temperature).state)
          id(boiler_temperature).publish_state(x);
  - platform: dallas   
    id: boiler_input_temperature
    name: "Boiler Input Temperature"
    device_class: "temperature"
    unit_of_measurement: "°C"
    address: 0x520000001c15ba28
    resolution: 10
    filters:
      - filter_out: nan
    on_value:
      lambda: |-
        if(x > id(boiler_output_temperature).state)
          id(boiler_temperature).publish_state(x);
  - platform: template
    id: boiler_temperature
    name: "Boiler Temperature"
    device_class: "temperature"
    unit_of_measurement: "°C"

binary_sensor:
  - platform: analog_threshold
    id: boiler_heating
    name: "Boiler is Heating"
    icon: "mdi:fire"
    sensor_id: heating_indicator
    threshold: 0.4
    on_press:
      then:
        - switch.turn_on: heating_led
    on_release:
      then:
        - switch.turn_off: heating_led
  - platform: analog_threshold
    id: boiler_full
    name: "Boiler is Full"
    sensor_id: boiler_temperature
    threshold:
      upper: 60.0
      lower: 40.0

switch:
  - platform: gpio
    id: heating_led
    pin:
      number: D5 #GPIO33
      inverted: False
    internal: True

  - platform: gpio
    id: boiler_flow
    pin: D6 #GPIO27
    internal: True
    
  - platform: gpio
    pin: D7 #GPIO26
    id: cv_flow
    internal: True
  
cover:
  - platform: template
    name: "3-way valve"
    # Open = CV
    open_action:
      # Cancel any previous action
      - switch.turn_off: cv_flow
      # Turn the OPEN switch on briefly
      - switch.turn_on: boiler_flow
      - delay: 20s
      - switch.turn_off: boiler_flow
    # Close = Boiler
    close_action:
      - switch.turn_off: boiler_flow
      - switch.turn_on: cv_flow
      - delay: 20s
      - switch.turn_off: cv_flow
    stop_action:
      - switch.turn_off: boiler_flow
      - switch.turn_off: cv_flow
    optimistic: true
    assumed_state: true