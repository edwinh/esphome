substitutions:
  name: living_room
  friendly_name: "Living room"

esphome:
  name: $name
  on_boot:
    priority: -10
    then:
      - script.execute: publish_states
  
esp32:
  board: nodemcu-32s
  framework:
    type: arduino

# Enable logging
logger:
#   level: NONE

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  reboot_timeout: 0s
  power_save_mode: high
  manual_ip:
    static_ip: !secret ip_living_room
    gateway: !secret ip_gateway
    subnet: !secret ip_subnet

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  # ap:
  #   ssid: "ESP_${name}"
  #   password: !secret wifi_password

# captive_portal:

globals:
  - id: test_pulses
    type: int
    restore_value: yes
    initial_value: '0'

script:
  - id: publish_states
    then:
      - lambda: |-
          id(test_consumption).publish_state(id(test_pulses));

sensor:
  - platform: uptime
    internal: false
    id: living_uptime
    name: "Living uptime"

  - platform: template
    id: test_consumption
    name: "Test consumption"
    
  - platform: dht
    pin: GPIO32
    model: DHT22
    temperature:
      id: living_room_temperature
      name: "Living room Temperature"
      filters:
        lambda: |-
          if(x > 10 && x < 35)
            return x;
          else
            return {};
    humidity:
      id: living_room_humidity
      name: "Living room Humidity"
    update_interval: 10s

binary_sensor:
  - platform: gpio
    pin: GPIO33
    name: "Living room Motion"
    device_class: motion

  - platform: gpio
    id: test_pulse
    pin: GPIO34
    filters:
        - delayed_on_off: 100ms
        - lambda: |-
            id(test_pulses) += x;
            return x;
    on_state:
        - script.execute: publish_states

switch:
  - platform: gpio
    pin: GPIO27
    name: "Boiler flow"
    id: boiler_flow_on

  
  - platform: gpio
    pin: GPIO26
    name: "CV flow"
    id: cv_flow_on

cover:
  - platform: template
    name: "Boiler valve"
    # Open = CV
    open_action:
      # Cancel any previous action
      - switch.turn_off: cv_flow_on
      # Turn the OPEN switch on briefly
      - switch.turn_on: boiler_flow_on
      - delay: 20s
      - switch.turn_off: boiler_flow_on
    # Close = Boiler
    close_action:
      - switch.turn_off: boiler_flow_on
      - switch.turn_on: cv_flow_on
      - delay: 20s
      - switch.turn_off: cv_flow_on
    stop_action:
      - switch.turn_off: boiler_flow_on
      - switch.turn_off: cv_flow_on
    optimistic: true
    assumed_state: true
