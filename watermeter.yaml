substitutions:
  name: watermeter
  friendly_name: "Water meter"

esphome:
  name: $name
  on_boot:
    priority: -10
    then:
      - script.execute: publish_states

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

# Enable logging
logger:
  level: NONE

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid_rpi
  password: !secret wifi_password
  fast_connect: true
  power_save_mode: high
  reboot_timeout: 0s
  manual_ip:
    static_ip: !secret ip_watermeter
    gateway: !secret ip_gateway
    subnet: !secret ip_subnet

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "ESP_${name}"
    password: !secret wifi_password

captive_portal:

web_server:
  port: 80

# deep_sleep:
#   run_duration: 330s
#   wakeup_pin: GPIO32
#   wakeup_pin_mode: INVERT_WAKEUP

esp32_ble_tracker:

globals:
 - id: main_counter_pulses
   type: int
   restore_value: yes
   initial_value: '0'
 - id: secondary_counter_pulses
   type: int
   restore_value: yes
   initial_value: '0'
 - id: event_quantity
   type: int
   restore_value: no
   initial_value: '0'
 - id: last_event_quantity
   type: int
   restore_value: yes
   initial_value: '0'
 - id: event_counter
   type: int
   restore_value: no
   initial_value: '0'
 - id: current_event_quantity
   type: int
   restore_value: no
   initial_value: '0'

script:
  - id: reset_main_counter
    then:
      - lambda: |-
          id(main_counter_pulses) -= 1;
          id(water_main_consumption).publish_state(id(main_counter_pulses));

  - id: reset_secondary_counter
    then:
      - lambda: |-
          id(secondary_counter_pulses) = 0;
          id(water_secondary_consumption).publish_state(id(secondary_counter_pulses));
  - id: publish_states
    then:
      - lambda: |-
          id(water_main_consumption).publish_state(id(main_counter_pulses));
          id(water_secondary_consumption).publish_state(id(secondary_counter_pulses));
          id(current_water_consumption).publish_state(id(event_quantity));
          id(last_water_consumption).publish_state(id(last_event_quantity));

text_sensor:
  - platform: version
    name: "ESPHome Version"
    
sensor:
- platform: uptime
  internal: false
  id: watermeter_uptime
- platform: pulse_meter
  pin: 
    number: GPIO32
    allow_other_uses: true
  name: "Water Pulse Meter"
  unit_of_measurement: "liter/min"
  timeout: 30sec
  icon: "mdi:water"

- platform: xiaomi_lywsd03mmc
  mac_address: "A4:C1:38:A8:64:67"
  bindkey: "eef418daf699a0c188f3bfd17e4565d9"
  temperature:
    name: "Living Room Temperature"
  humidity:
    name: "Living Room Humidity"
  battery_level:
    name: "Living Room Battery Level"
- platform: xiaomi_lywsd03mmc
  mac_address: "A4:C1:38:22:29:49"
  bindkey: "eef418daf699a0c188f3bfd17e4565d9"
  temperature:
    name: "Bedroom Temperature"
  humidity:
    name: "Bedroom Humidity"
  battery_level:
    name: "Bedroom Battery Level"
- platform: xiaomi_lywsd03mmc
  mac_address: "A4:C1:38:D9:32:9D"
  bindkey: "eef418daf699a0c188f3bfd17e4565d9"
  temperature:
    name: "Bathroom Temperature"
  humidity:
    name: "Bathroom Humidity"
  battery_level:
    name: "Bathroom Battery Level"

- platform: template
  id: water_main_consumption
  name: "Main water consumption"
  unit_of_measurement: "L"
  accuracy_decimals: 0
  device_class: water
  state_class: total_increasing
  icon: "mdi:water"

- platform: template
  id: water_secondary_consumption
  name: "Secondary water consumption"
  unit_of_measurement: "L"
  device_class: water
  accuracy_decimals: 0
  icon: "mdi:water"

- platform: template
  id: current_water_consumption
  name: "Current water consumption"
  unit_of_measurement: "L"
  device_class: water
  accuracy_decimals: 0
  icon: "mdi:water"

- platform: template
  id: last_water_consumption
  name: "Last water consumption"
  unit_of_measurement: "L"
  device_class: water
  accuracy_decimals: 0
  icon: "mdi:water"

binary_sensor:
  - platform: gpio
    id: water_pulse
    pin: 
      number: GPIO32
      allow_other_uses: true
    internal: true
    filters:
        - delayed_on_off: 100ms
        - lambda: |-
            // Only increase when ESP is up for longer than 1 sec
            // Attempt to solve issue with ghost counts
            //if (id(watermeter_uptime).state > 1.0) {
            id(main_counter_pulses) += x;
            id(secondary_counter_pulses) += x;
            id(event_quantity) += x;
            return x;
            // } else {
            //   return 0;
            // }
    on_state:
        - script.execute: publish_states

# Reset counter buttons
switch:
  - platform: template
    name: "${friendly_name} reset main counter button"
    icon: "mdi:restart"
    turn_on_action:
      - script.execute: reset_main_counter

  - platform: template
    name: "${friendly_name} reset secondary counter button"
    icon: "mdi:restart"
    turn_on_action:
      - script.execute: reset_secondary_counter
  
  - platform: restart
    name: "Watermeter restart"

interval:
  # Save the last consumption
  #
  # An event is published when a water flow (>= 1L / 15 seconds) is
  # detected and followed by a stop of consumption for a defined time.
  - interval: 15sec
    then:
      - lambda: |-
          if (id(event_quantity) != id(last_event_quantity)) {
            // Water continues to flow
            // Reset event counter
            id(event_counter) = 0;
          } else {
            // Water no longer flows
            if (id(event_quantity)) {
              // 4 * 15 * 5 = 5min
              if (id(event_counter) < 4 * 5) {
                // Timeout is not reached
                id(event_counter)++;
              } else {
                  // Timeout is reached
                  id(last_water_consumption).publish_state(id(event_quantity));
                  id(event_quantity) = 0;
              }
            }
          }
          id(last_event_quantity) = id(event_quantity);
  # Track the current consumption
  - interval: 2sec
    then:
      - lambda: |-
          if (id(event_quantity) != id(current_event_quantity)) {
            id(current_water_consumption).publish_state(id(event_quantity));
          }
          id(current_event_quantity) = id(event_quantity);